/*
 * Copyright (c) 2014, 2015 IBM Corp.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 * 
 * Contributors:
 *    IBM Corp - initial API and implementation and initial documentation
 */

import groovy.xml.*

ext {
    // Clients projects that do not need to be deployed on the server
    clientProjects              = ['da-arload-filesystem-example']

    server                      = 'iap'
    sdkProjectsDir              = "$rootDir/.."
    sdkDir                      = "$sdkProjectsDir/.."
    iapDir                      = "$sdkDir/.."
    masterBuildDir              = "$rootDir/build"
    stagedBinariesDir           = "$masterBuildDir/Binaries"
    stagedToolkitDir            = "$masterBuildDir/IAP-Deployment-Toolkit"
    projectDependencies         = []
    lastProject                 = null
    uiEnvironmentProperties     = null
}

allprojects {
    apply plugin: 'java'

    task generateMappingJar(type: Exec) {
        onlyIf {
            if (project.name == 'master') {
                lastProject = subprojects[-1].name
            }

            project.name == lastProject
        }

        if (project.hasProperty('mappingJAR') && project.hasProperty('schema')) {
            workingDir "$stagedToolkitDir/scripts"
            commandLine 'cmd', '/c', 'setup.bat'
            args '-s', server, '-t', 'generateMappingJar',
                '-x', schema,
                '-o', mappingJAR
        }
    }

    task deployExample(type: Exec) {
        onlyIf {
            if (project.name == 'master') {
                lastProject = subprojects[-1].name
            }

            project.name == lastProject
        }

        doFirst {
            generateDefaults()
        }

        workingDir "$stagedToolkitDir/scripts"
        commandLine 'cmd', '/c', 'setup.bat'
        args '-s', server, '-t', 'deployExample'

        doLast {
            ensurePreReqsUpToDate()
            copyAutogeneratedFiles()
        }
    }

    task deploy(type: Exec, dependsOn: build) {
        onlyIf {
            if (project.name == 'master') {
                lastProject = subprojects[-1].name
            }

            project.name == lastProject
        }

        workingDir "$stagedToolkitDir/scripts"
        commandLine 'cmd', '/c', 'setup.bat'
        args '-s', server, '-t', 'deploy'

        doLast {
            copyAutogeneratedFiles()
        }
    }
}

subprojects {
    dependencies {
        compile fileTree(dir: "$stagedToolkitDir/application/shared/lib", includes: ['**/*.jar']),
                zipTree("$iapDir/Binaries/wlp/wlp.zip").matching { it.include(['wlp/dev/api/**/*.jar']) }
    }

    task stageToolkitAndCommonOverrides() {
        // Intentionally running in configuration phase to ensure the toolkit is in place before the dependencies within are required
        if (!file(stagedBinariesDir).exists()) {
            copy {
                from "$iapDir/Binaries"
                into stagedBinariesDir
            }
        }
        if (!file(stagedToolkitDir).exists()) {
            // Excluding DataSourceDaod.properties to avoid conflict with the generated version of the same file
            copy {
                from "$iapDir/IAP-Deployment-Toolkit"
                exclude '**/application/targets/daod/WEB-INF/classes/DataSourceDaod.properties',
                    '**/application/targets/daod/WEB-INF/classes/ApolloServerSettingsMandatory.properties',
                    '**/configuration'
                into stagedToolkitDir
            }
            copy {
                from "$iapDir/IAP-Deployment-Toolkit/configuration-example"
                into "$stagedToolkitDir/configuration"
            }
            copy {
                from "$rootDir/toolkit-overrides"
                into stagedToolkitDir
            }
        }
    }

    task stageBuiltProjects() << {
        getProjectDependenciesTree(project.name).each { requiredProject ->
            copy {
                from "$sdkProjectsDir/$requiredProject/build/libs"
                into "$stagedToolkitDir/configuration/fragments/$requiredProject/WEB-INF/lib"
            }
            copy {
                from "$sdkProjectsDir/$requiredProject/fragment"
                into "$stagedToolkitDir/configuration/fragments/$requiredProject"
            }
        }

        if (!clientProjects.contains(project.name)) {
            copy {
                from "$project.buildDir/libs"
                into "$stagedToolkitDir/configuration/fragments/$project.name/WEB-INF/lib"
            }
            copy {
                from "$project.projectDir/fragment"
                into "$stagedToolkitDir/configuration/fragments/$project.name"
            }
        }
    }

    build.dependsOn stageBuiltProjects
    stageBuiltProjects.mustRunAfter jar

    task addDaodDataSource(type: Exec) {
        doFirst {
            getProjectDependenciesTree(project.name).each { requiredProject ->
                new File("$stagedToolkitDir/configuration/fragments/$requiredProject").deleteDir()
            }
            new File("$stagedToolkitDir/configuration/fragments/$project.name").deleteDir()
        }

        workingDir "$stagedToolkitDir/scripts"
        commandLine 'cmd', '/c', 'setup.bat'
        args '-s', server, '-t', 'addDaodDataSource', '-dn', project.name

        doLast {
            // Add required projects as fragments to DAOD WAR in topology.xml now, before deployment
            boolean updateRequired = false
            def topologyFilePath = "$stagedToolkitDir/configuration/environment/topology.xml"
            def topologyFile = new File("$topologyFilePath")
            def topology = new XmlSlurper().parse(topologyFile)
            def application = topology.applications.application.find { it.@name == 'iap' }
            def daodWar = application.wars.war.find { it.@target == 'daod' && it.@name == project.name }
            deleteNodeIfPresent(daodWar.fragments.fragment.find { it.@name == project.name })
            String fragmentsXml = ''

            getProjectDependenciesTree(project.name).each { requiredProject ->
                copy {
                    from "$sdkProjectsDir/$requiredProject/fragment"
                    into "$stagedToolkitDir/configuration/fragments/$requiredProject"
                }
                fragmentsXml += "\n            <fragment name=\"$requiredProject\"/>"
            }

            fragmentsXml += "\n            <fragment name=\"$project.name\" />\n          "
            daodWar.fragments.appendNode(fragmentsXml)

            writeXmlFile(new File("$topologyFilePath"), topology)
            updateTextFile(topologyFile) {
                it = it.replaceAll('&lt;', '<')
                it.replaceAll('&gt;', '>')
            }

            copy {
                from "$project.projectDir/fragment"
                into "$stagedToolkitDir/configuration/fragments/$project.name"
            }
        }
    }

    task unpackXap() {
        description 'Unpacks the XAP into the UI extensibility-sample extractedxap folder so the contents can be referenced by the sample projects.'

        onlyIf {
            uiEnvironmentProperties = getProperties(new Properties(), file("$project.projectDir/ui-project.properties"))
            uiEnvironmentProperties['ui.project.dir']
        }

        doLast {
            def uiProjectBuildDir = "${uiEnvironmentProperties['ui.project.dir']}/build"
            def uiProjectExtractedxapDir = "${uiEnvironmentProperties['ui.project.dir']}/extractedxap"
            def extractedxapDir = file(uiProjectExtractedxapDir)
            extractedxapDir.deleteDir()
            extractedxapDir.mkdirs()

            copy {
                from zipTree("$stagedToolkitDir/application/targets/core/Apollo.xap")
                into uiProjectExtractedxapDir
            }
        }
    }

    task packXap(type: Exec) {
        onlyIf {
            uiEnvironmentProperties = getProperties(new Properties(), file("$project.projectDir/ui-project.properties"))
            uiEnvironmentProperties['ui.project.dir']
        }

        doFirst {
            // Copy the contents of the UI extensibility-sample build output folder to the xap-supplement fragment for inclusion in the WAR.
            copy {
                from "${uiEnvironmentProperties['ui.project.dir']}/build"
                into "$stagedToolkitDir/configuration/fragments/xap-supplement"
            }

            // Copy the contents of the UI extensibility-sample webcontent folder to the core fragment for inclusion in the WAR.
            copy {
                from "${uiEnvironmentProperties['ui.project.dir']}/webcontent"
                into "$stagedToolkitDir/configuration/fragments/core"
            }
        }

        workingDir "$stagedToolkitDir/scripts"
        commandLine 'cmd', '/c', 'setup.bat'
        args '-s', server, '-t', 'supplementXapIfRequired'

        doLast {
            def iapEnvironmentProperties = getProperties(new Properties(), file("$stagedToolkitDir/configuration/environment/iap/environment.properties"))
            def wlpHomeDir = iapEnvironmentProperties.'wlp.home.dir'

            copy {
                from "$wlpHomeDir/usr/servers/iap/apps/core.war"
                include 'Apollo.xap'
                into "$stagedToolkitDir/configuration/fragments/core"
            }
        }
    }
}

project(':da-arload-filesystem-example') {
    dependencies {
        compile project(':da-example-common'), fileTree(dir: "$stagedToolkitDir/application/client/bin", includes: ['**/*.jar'])
    }
}

project(':da-subset-documents-example') {
    dependencies {
        compile project(':da-example-common')
    }
}

project(':da-subset-filesystem-example') {
    dependencies {
        compile project(':da-example-common')
    }
}

project(':da-subset-rest-example') {
    dependencies {
        compile project(':da-example-common')
    }
}




// METHODS
void generateDefaults() {
    exec {
        workingDir "$stagedToolkitDir/scripts"
        commandLine 'cmd', '/c', 'setup.bat'
        args '-s', server, '-t', 'generateDefaults'
    }
}

void ensurePreReqsUpToDate() {
    exec {
        workingDir "$stagedToolkitDir/scripts"
        commandLine 'cmd', '/c', 'setup.bat'
        args '-s', server, '-t', 'ensurePreReqsUpToDate'
    }

    def iapEnvironmentProperties = getProperties(new Properties(), file("$stagedToolkitDir/configuration/environment/iap/environment.properties"))
    def wlpHomeDir = iapEnvironmentProperties.'wlp.home.dir'

    // Configures Liberty to use the example users and groups and adds files to enable it to be imported into Eclipse
    if (wlpHomeDir) {
        copy {
            from "$sdkDir/wlp-overrides"
            into wlpHomeDir
        }
    }
}

void copyAutogeneratedFiles() {
    new File(sdkProjectsDir).eachDir {
        if (it.name != 'master' && it.name != 'da-example-common' && !clientProjects.contains(it.name)) {
            def iapEnvironmentProperties = getProperties(new Properties(), file("$stagedToolkitDir/configuration/environment/iap/environment.properties"))
            def wlpHomeDir = iapEnvironmentProperties.'wlp.home.dir'
            def projectWebInfDir = "$wlpHomeDir/usr/servers/$server/apps/${it.name}.war/WEB-INF"
            def autogenFragmentsWebInfDir = "$stagedToolkitDir/scripts/gradle/build/autogenFragments/$it.name/WEB-INF"

            copy {
                from projectWebInfDir
                include 'ibm-web-bnd.xml'
                into autogenFragmentsWebInfDir
            }
            copy {
                from "$projectWebInfDir/classes"
                include 'DataSourceCore.properties', 'DataSourceDaod.properties', 'log4j.properties', 'SearchIndexLocation.properties', 'SearchLocalization.properties'
                into "$autogenFragmentsWebInfDir/classes"
            }
            delete {
                file("$stagedToolkitDir/configuration/fragments/common/WEB-INF/classes/log4j.properties")
            }
        }
    }
}

def calculateProjectDependencies(String projectName) {
    return project(":$projectName").configurations.compile.allDependencies.findAll { it.name != 'unspecified' }.collect { it.name }
}

void generateProjectDependencyTree(String projectName) {
    def subProjectDependencies = calculateProjectDependencies(projectName)

    subProjectDependencies.reverseEach {
        projectDependencies.add(0, it)
        generateProjectDependencyTree(it)
    }
}

def getProjectDependenciesTree(String projectName) {
    generateProjectDependencyTree(projectName)
    def projectDependenciesTree = projectDependencies.unique(false)
    projectDependencies = []
    return projectDependenciesTree
}

Properties getProperties(Properties properties, File file) {
    file.withInputStream { stream ->
        properties.load(stream)
    }
    return properties
}

boolean deleteNodeIfPresent(def node) {
    if (node.size() > 0) {
        node.replaceNode {}
        return true
    }
    return false
}

void writeXmlFile(File file, def rootNode) {
    file.withWriter("UTF-8") { out ->
        XmlUtil.serialize(new StreamingMarkupBuilder().bind{ mkp.yield rootNode }, out)
    }
}

// Convenient function for altering a text file's contents with replace rules, regular expressions, or basic String manipulation.
void updateTextFile(def file, Closure updateText) {
    if (!(file instanceof File)) file = new File(file)
    file.write(updateText(file.text))
}
