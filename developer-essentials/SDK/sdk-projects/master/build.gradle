/*
 * Copyright (c) 2014, 2017 IBM Corp.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 * 
 * Contributors:
 *    IBM Corp - initial API and implementation and initial documentation
 */

import groovy.io.FileType
import groovy.util.slurpersupport.GPathResult
import groovy.xml.StreamingMarkupBuilder
import groovy.xml.XmlUtil


ext {
    
    // Example project names
    daExampleCommon             = 'onyx-da-example-common'
    daArloadFilesystemExample   = 'onyx-da-arload-filesystem-example'
    daSubsetRestExample         = 'onyx-da-subset-rest-example'
    daSubsetDocumentsExample    = 'onyx-da-subset-documents-example'
    daSubsetFilesystemExample   = 'onyx-da-subset-filesystem-example'

    auditExampleCommon          = 'opal-audit-example-common'
    auditCsvExample             = 'opal-audit-csv-example'
    auditDatabaseExample        = 'opal-audit-database-example'
    auditFileExample            = 'opal-audit-file-example'

    // Client projects that do not need to be deployed on the server
    clientProjects              = [daArloadFilesystemExample]

    server                      = project.hasProperty('server') ? "$server" : 'onyx-server'
    sdkProjectsDir              = "$rootDir/.."
    sdkDir                      = "$sdkProjectsDir/.."
    i2analyzeDir                = "$sdkDir/.."
    masterBuildDir              = "$rootDir/build"
    stagedToolkitDir            = "$masterBuildDir/toolkit"
    projectDependencies         = []
    uiEnvironmentProperties     = null
    
}

allprojects {
    apply plugin: 'java'

    task generateMappingJar(type: Exec) {
        onlyIf {
            isFinalSubProject(project.name)
        }

        if (project.hasProperty('mappingJAR') && project.hasProperty('schema')) {
            workingDir "$stagedToolkitDir/scripts"
            commandLine 'cmd', '/c', 'setup.bat'
            args '-s', server, '-t', 'generateMappingJar',
                '-x', schema,
                '-o', mappingJAR
        }
    }

    task deployExample(type: Exec) {
        onlyIf {
            isFinalSubProject(project.name)
        }

        workingDir "$stagedToolkitDir/scripts"
        commandLine 'cmd', '/c', 'setup.bat'
        args '-s', server, '-t', 'deployExample'

        doLast {
            applyLibertyOverrides()
            copyAutogeneratedFiles()
            copyServerAutogeneratedFiles()
        }
    }

    task deploy(type: Exec, dependsOn: build) {
        onlyIf {
            isFinalSubProject(project.name)
        }

        workingDir "$stagedToolkitDir/scripts"
        commandLine 'cmd', '/c', 'setup.bat'
        args '-s', server, '-t', 'deploy'

        doLast {
            copyAutogeneratedFiles()
            copyServerAutogeneratedFiles()
            ensureServerXMLIncludesAuditDSIfExists()
        }
    }
}

subprojects {
    dependencies {
        compile fileTree(dir: "$stagedToolkitDir/application/shared/lib", includes: ['**/*.jar']),
                fileTree(dir: "$stagedToolkitDir/application/targets/opal-services-is/WEB-INF/lib", includes: ['**/disco-api*.jar']),
                zipTree("$stagedToolkitDir/bin/wlp/wlp.zip").matching { it.include(['wlp/dev/api/**/*.jar']) },
                fileTree(dir: "$project.projectDir/fragment/WEB-INF/lib", includes: ['**/*.jar'])
    }

    task stageToolkitAndCommonOverrides {
        // Intentionally running in configuration phase to ensure the toolkit is in place before the dependencies within are required
        if (!file(stagedToolkitDir).exists()) {
            // Excluding DataSource.properties to avoid conflict with the generated version of the same file
            copy {
                from "$i2analyzeDir/toolkit"
                exclude '**/application/targets/onyx-services-daod/WEB-INF/classes/DataSource.properties',
                    '/configuration/**'
                into stagedToolkitDir
            }
            copy {
                from "$i2analyzeDir/toolkit/examples/configurations/analysis-repository/configuration"
                into "$stagedToolkitDir/configuration"
            }
            copy {
                from "$rootDir/toolkit-overrides"
                into stagedToolkitDir
            }
        }
    }

    task stageBuiltProjects << {
        if (!clientProjects.contains(project.name)) {
            (getProjectDependenciesTree(project.name) + project.name).each { requiredProject ->
                copy {
                    from "$sdkProjectsDir/$requiredProject/build/libs"
                    into "$stagedToolkitDir/configuration/fragments/$requiredProject/WEB-INF/lib"
                }
                copy {
                    from "$sdkProjectsDir/$requiredProject/fragment"
                    into "$stagedToolkitDir/configuration/fragments/$requiredProject"
                }
            }
        }
    }

    build.dependsOn stageBuiltProjects
    stageBuiltProjects.mustRunAfter jar

    task addDaodDataSource(type: Exec) {
        File topologyFile = file("$stagedToolkitDir/configuration/environment/topology.xml")

        doFirst {
            // Remove data source if it already exists
            file("$stagedToolkitDir/configuration/environment/dsid").eachFile(FileType.FILES) {
                Properties dsidProperties = getProperties(new Properties(), it)
                if (dsidProperties.'DataSourceName' == project.name) {
                    GPathResult topology = new XmlSlurper().parse(topologyFile)
                    GPathResult application = topology.applications.application.find { it.@name == server }
                    deleteNodeIfPresent(topology.'i2-data-sources'.'i2-data-source'.find { it.@id == dsidProperties.'TopologyId' })
                    deleteNodeIfPresent(application.'lucene-indexes'.'lucene-index'.find { it.@id == dsidProperties.'TopologyId' })
                    deleteNodeIfPresent(application.wars.war.find { it.@'i2-data-source-id' == dsidProperties.'TopologyId' })
                    writeXmlFile(topologyFile, topology)
                    it.delete()
                }
            }

            getProjectDependenciesTree(project.name).each { requiredProject ->
                file("$stagedToolkitDir/configuration/fragments/$requiredProject").deleteDir()
            }
            file("$stagedToolkitDir/configuration/fragments/$project.name").deleteDir()
        }

        workingDir "$stagedToolkitDir/scripts"
        commandLine 'cmd', '/c', 'setup.bat'
        args '-s', server, '-t', 'addDaodDataSource', '-dn', project.name

        doLast {
            // Add required projects as fragments to DAOD WAR in topology.xml now, before deployment
            GPathResult topology = new XmlSlurper().parse(topologyFile)
            GPathResult application = topology.applications.application.find { it.@name == server }
            GPathResult daodWar = application.wars.war.find { it.@target == 'onyx-services-daod' && it.@name == project.name }
            deleteNodeIfPresent(daodWar.fragments.fragment.find { it.@name == project.name })
            String fragmentsXml = ''

            getProjectDependenciesTree(project.name).each { requiredProject ->
                copy {
                    from "$sdkProjectsDir/$requiredProject/fragment"
                    into "$stagedToolkitDir/configuration/fragments/$requiredProject"
                }
                fragmentsXml += "\n            <fragment name=\"$requiredProject\"/>"
            }

            fragmentsXml += "\n            <fragment name=\"$project.name\" />\n          "
            daodWar.fragments.appendNode(fragmentsXml)
            writeXmlFile(topologyFile, topology)

            copy {
                from "$project.projectDir/fragment"
                into "$stagedToolkitDir/configuration/fragments/$project.name"
            }
        }
    }

    task unpackXap {
        description 'Unpacks the XAP into the UI extensibility-sample extractedxap folder so the contents can be referenced by the sample projects.'

        onlyIf {
            uiEnvironmentProperties = getProperties(new Properties(), file("$project.projectDir/onyx-ui-project.properties"))
            uiEnvironmentProperties.'ui.project.dir'
        }

        doLast {
            String uiProjectExtractedxapDir = "${uiEnvironmentProperties.'ui.project.dir'}/extractedxap"
            File extractedxapDir = file(uiProjectExtractedxapDir)
            extractedxapDir.deleteDir()
            extractedxapDir.mkdirs()

            copy {
                from zipTree("$stagedToolkitDir/application/targets/onyx-services-ar/Apollo.xap")
                into uiProjectExtractedxapDir
            }
        }
    }

    task packXap(type: Exec) {
        onlyIf {
            uiEnvironmentProperties = getProperties(new Properties(), file("$project.projectDir/onyx-ui-project.properties"))
            uiEnvironmentProperties.'ui.project.dir'
        }

        doFirst {
            // Copy the contents of the UI extensibility-sample build output folder to the xap-supplement fragment for inclusion in the WAR.
            copy {
                from "${uiEnvironmentProperties.'ui.project.dir'}/build"
                into "$stagedToolkitDir/configuration/fragments/xap-supplement"
            }

            // Copy the contents of the UI extensibility-sample webcontent folder to the onyx-services-ar fragment for inclusion in the WAR.
            copy {
                from "${uiEnvironmentProperties.'ui.project.dir'}/webcontent"
                into "$stagedToolkitDir/configuration/fragments/onyx-services-ar"
            }
        }

        workingDir "$stagedToolkitDir/scripts"
        commandLine 'cmd', '/c', 'setup.bat'
        args '-s', server, '-t', 'packXap'
    }
}

project(":$daArloadFilesystemExample") {
    dependencies {
        compile project(":$daExampleCommon"), fileTree(dir: "$stagedToolkitDir/application/client/bin", includes: ['**/*.jar'])
    }
}

project(":$daSubsetDocumentsExample") {
    dependencies {
        compile project(":$daExampleCommon")
    }
}

project(":$daSubsetFilesystemExample") {
    dependencies {
        compile project(":$daExampleCommon")
    }
}

project(":$daSubsetRestExample") {
    dependencies {
        compile project(":$daExampleCommon")
    }
}

project(":$auditCsvExample") {
    dependencies {
        compile project(":$auditExampleCommon")
    }
}

project(":$auditDatabaseExample") {
    dependencies {
        compile project(":$auditExampleCommon")
    }
}

project(":$auditFileExample") {
    dependencies {
        compile project(":$auditExampleCommon")
    }
}

// METHODS
boolean isFinalSubProject(String projectName) {
    // A means of ensuring that certain tasks are only executed once, even without a -pr argument being specified
    projectName == subprojects[-1].name
}

def getAuditDSDir(){
    def serverDir = getServerHomeDir()
    def opalWarDir = "$serverDir/apps/opal-services-is.war"
    return "$opalWarDir/audit-ds"
}

def getServerHomeDir(){
    def wlpHomeDir = getWlpHomeDir()
    return "$wlpHomeDir/usr/servers/$server"
}

def getWlpHomeDir(){
    def i2analyzeEnvironmentProperties = getProperties(new Properties(), file("$stagedToolkitDir/configuration/environment/onyx-server/environment.properties"))
    return i2analyzeEnvironmentProperties.'wlp.home.dir'
}

void applyLibertyOverrides() {
    // Add Eclipse settings files to Liberty to suppress redundant warnings regarding the grammar of fragments of XML
    def wlpHomeDir = getWlpHomeDir()
    if (wlpHomeDir) {
        copy {
            from "$sdkDir/wlp-overrides"
            into wlpHomeDir
        }
    }
}

void copyAutogeneratedFiles() {
    file(sdkProjectsDir).eachDir {
        if (it.name != 'master' && it.name != daExampleCommon && !clientProjects.contains(it.name)) {
            def serverDir = getServerHomeDir()
            String projectWebInfDir = "$serverDir/apps/${it.name}.war/WEB-INF"
            String autogenFragmentsWebInfDir = "$stagedToolkitDir/scripts/gradle/build/autogenFragments/$it.name/WEB-INF"

            copy {
                from projectWebInfDir
                include 'ibm-web-bnd.xml'
                into autogenFragmentsWebInfDir
            }
            copy {
                from "$projectWebInfDir/classes"
                include 'DataSource.properties', 'log4j.properties', 'SearchIndexLocation.properties', 'SearchLocalization.properties'
                into "$autogenFragmentsWebInfDir/classes"
            }
            delete {
                file("$stagedToolkitDir/configuration/fragments/common/WEB-INF/classes/log4j.properties")
            }
        }
    }
}

void copyServerAutogeneratedFiles() {
    // Copying opal-server autogen files
    String sourceWarName
    def serverDir = getServerHomeDir()
    String projectWebInfDir = "$wlpHomeDir/usr/servers/opal-server/apps/opal-services-is.war/WEB-INF"
    String autogenFragmentsWebInfDir = "$stagedToolkitDir/scripts/gradle/build/autogenFragments/opal-services-is/WEB-INF"

    copy {
        from projectWebInfDir
        include 'ibm-web-bnd.xml'
        into autogenFragmentsWebInfDir
    }
    copy {
        from "$projectWebInfDir/classes"
        include 'AwcServerSettingsLocation.properties',
                'DataSource.properties',
                'DiscoFileStoreLocation.properties',
                'DiscoSolrConfiguration.properties',
                'log4j.properties'
        into "$autogenFragmentsWebInfDir/classes"
    }
}

void ensureServerXMLIncludesAuditDSIfExists() {
    def auditDSDir = getAuditDSDir()
    File auditDSSnippet = new File("$auditDSDir/server.ds-audit.xml")
    if(auditDSSnippet.exists()){
        def serverDir = getServerHomeDir()
        File serverXmlFile = new File("$serverDir/server.xml")
        setAuditDSIncludeIfRequired(auditDSSnippet, serverXmlFile)
    }
}

private void setAuditDSIncludeIfRequired(File auditDSSnippet, File serverXmlFile) {
    def serverXml = new XmlSlurper().parse(serverXmlFile)
    String normalizedAuditDSSSnippet = auditDSSnippet.toPath().normalize().toFile().getCanonicalPath()
    if (!dataSourceIncludeAlreadyInServerXml(normalizedAuditDSSSnippet, serverXml)) {
        serverXml.appendNode { include(location: normalizedAuditDSSSnippet) }
        writeXmlFile(serverXmlFile, serverXml)
    }
}

private boolean dataSourceIncludeAlreadyInServerXml(String dataSourceLocation, def serverXml){
    return serverXml.'include'.find {
        it.@location.toString() == dataSourceLocation
    }
}

List<String> calculateProjectDependencies(String projectName) {
    project(":$projectName").configurations.compile.allDependencies.findAll { it.name != 'unspecified' }*.name
}

void generateProjectDependencyTree(String projectName) {
    List<String> subProjectDependencies = calculateProjectDependencies(projectName)

    subProjectDependencies.reverseEach {
        projectDependencies.add(0, it)
        generateProjectDependencyTree(it)
    }
}

List<String> getProjectDependenciesTree(String projectName) {
    generateProjectDependencyTree(projectName)
    List<String> projectDependenciesTree = projectDependencies.unique(false)
    projectDependencies = []
    projectDependenciesTree
}

Properties getProperties(Properties properties, File file) {
    file.withInputStream { stream ->
        properties.load(stream)
    }
    properties
}

boolean deleteNodeIfPresent(GPathResult node) {
    if (node.size() > 0) {
        node.replaceNode { }
        return true
    }
}

// Convenient function for altering a text file's contents with replace rules, regular expressions, or basic String manipulation.
void updateTextFile(def textFile, Closure updateText) {
    File file = file(textFile)
    file.write(updateText(file.text))
}

void writeXmlFile(File file, GPathResult rootNode) {
    file.withWriter('UTF-8') { out ->
        XmlUtil.serialize(new StreamingMarkupBuilder().bind { mkp.yield rootNode }, out)
    }
    updateTextFile(file) {
        it = it.replaceAll('&lt;', '<')
        it.replaceAll('&gt;', '>')
    }
}
